buildscript {
    repositories {
        jcenter()
        maven {
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}
apply plugin: 'maven-publish'
apply plugin: 'net.minecraftforge.gradle.forge'

ext.configFile = file('build.properties')
ext.config = parseConfig(configFile)

version = "${config.mc_version}-${config.year}.${config.month}.${config.build_number}"
group = "com.github.txuritan"
archivesBaseName = "txcore"

idea { module { inheritOutputDirs = true } }

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

minecraft {
    version = "1.11.2-13.20.0.2228"
    runDir = "run"
    mappings = "snapshot_20170301"
    makeObfSourceJar = true
}

dependencies {

}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task txDeobfJar(type: Jar, dependsOn: "reobfJar") {
    from sourceSets.main.output
    classifier = "dev"
}

task txSourcesJar(type: Jar, dependsOn: "sourceJar") {
    from sourceSets.main.allJava
    classifier = "sources"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId "com.github.txuritan"
            artifactId "txcore"
            version "${config.mc_version}-${config.year}.${config.month}.${config.build_number}"

            from components.java
            artifact txDeobfJar
            artifact txSourcesJar
        }
    }
    repositories {
        maven {
            url "file://C:/Users/txurt/maven-repository"
        }
    }
}

def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

task incrementBuildNumber {
    config.build_number = (config.build_number.toString().toInteger()) + 1
    configFile.withWriter {
        config.toProperties().store(it, "")
    }
}

defaultTasks 'clean', 'build', 'incrementBuildNumber'

